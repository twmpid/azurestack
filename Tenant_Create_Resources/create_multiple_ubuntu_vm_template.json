{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "apiProfile": "2018-03-01-hybrid",
    "parameters": {
        "adminUsername": {
            "defaultValue": "vmadmin",
            "type": "String",
            "metadata": {
                "description": "The name of the Administrator of the new VMs"
            }
        },
        "adminPassword": {
            "defaultValue": "Twm@0987654321",
            "type": "SecureString",
            "metadata": {
                "description": "The password for the Administrator account of the new VMs. Default value is subscription id"
            }
        },
        "numberOfInstances": {
            "defaultValue": 3,
            "type": "Int"
        },
        "vmNamePrefix": {
            "defaultValue": "vmset-",
            "type": "String",
            "metadata": {
                "description": "VM name prefix"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_A1",
            "allowedValues": [
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4"
            ],
            "type": "String",
            "metadata": {
                "description": "This is the size of your VM"
            }
        },
        "osImageSKU": {
            "defaultValue": "18.04-LTS",
            "type": "String",
			"allowedValues": [
			    "14.04.5-LTS",
				"16.04-LTS",
			    "18.04-LTS"
			],
            "metadata": {
                "description": "The Linux version for the VM. This will pick a fully patched image of this given Centos"
            }
        }
    },
    "variables": {
        "availabilitySetName": "[toLower(concat('aSet-', resourceGroup().name))]",
        "storageAccountType": "Standard_LRS",
        "vmSize": "[parameters('vmSize')]",
        "osImageVersion": "latest",
        "addressPrefix": "10.0.0.0/16",
        "virtualNetworkName": "[tolower(concat('vNet-',resourceGroup().name))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "NICPrefix": "vnic-",
        "subnetPrefix": "10.0.0.0/24",
        "subnetName": "vmstaticsubnet",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "storageName": "[concat('sa', uniquestring(resourceGroup().id))]",
        "publicLBName": "[tolower(concat('external-lb-', resourceGroup().name))]",
        "publiclbID": "[resourceId('Microsoft.Network/loadBalancers',variables('publicLBName'))]",
        "lbFE": "[tolower(concat('external-lb-fe-',resourceGroup().name))]",
        "publiclbFEConfigID": "[concat(variables('publiclbID'),'/frontendIPConfigurations/',variables('lbFE'))]",
        "publicIPAddressName": "[tolower(concat('public-ip',resourceGroup().name))]",
        "rdpPort": 22,
        "nsgName": "[tolower(concat('vmnsg',resourceGroup().name))]",
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
		"osImageOffer": "UbuntuServer",
		"osImagePublisher": "Canonical",
        "vmContainerName": "vhds"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            },
            "dependsOn": [
                "[variables('publiclbName')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[variables('rdpPort')]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": "3",
                "platformUpdateDomainCount": "1"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
                
            },
            "dependsOn": [
                "[variables('vnetID')]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[variables('nsgID')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('nsgID')]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('publiclbName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('lbFE')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackend"
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetID')]",
                "[variables('publicIPAddressName')]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('publicLBName'), '/ssh-VM', copyIndex())]",
            "apiVersion": "2017-10-01",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "lbNatLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('publiclbFEConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2200)]",
                "backendPort": 22,
                "enableFloatingIP": false
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('publiclbName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('publiclbID'), '/backendAddressPools/LoadBalancerBackend')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('publiclbID'), '/inboundNatRules/ssh-VM', copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('publicLBName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('publicLBName'), '/inboundNatRules/', 'ssh-VM', copyIndex())]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('vmNamePrefix'), copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('osImagePublisher')]",
                        "offer": "[variables('osImageOffer')]",
                        "sku": "[parameters('osImageSKU')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')),providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmContainerName'),'/', parameters('vmNamePrefix'), copyIndex(),'-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')),providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob)]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/',variables('storageName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NICPrefix'), parameters('vmNamePrefix'), copyIndex()))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            ]
        }
    ],
    "outputs": {}
}
